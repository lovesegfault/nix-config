name: ci

on:
  push:
    branches:
      - master
      - try
  pull_request:

env:
  flake: "github:${{ github.repository }}/${{ github.sha }}"
  nix-installer-tag: "v0.13.1"
  nix-conf: |-
    auto-optimise-store = true
    accept-flake-config = true
    builders-use-substitutes = true
    max-jobs = auto
  aarch64-host: "aarch64.nixos.community"
  aarch64-ssh-config: |-
    Host aarch64.nixos.community 147.28.143.250
        User lovesegfault
        IdentitiesOnly yes
        IdentityFile ~/.ssh/id_ed25519
  aarch64-ssh-known-host: |-
    aarch64-build-box,aarch64.nixos.community,147.75.77.190 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMUTz5i9u5H2FHNAmZJyoJfIGyUm/HfGhfwnc142L3ds

jobs:
  flake-check:
    runs-on: ubuntu-latest
    steps:
      - uses: DeterminateSystems/nix-installer-action@v4
        with:
          nix-installer-tag: ${{ env.nix-installer-tag }}
          extra-conf: ${{ env.nix-conf }}
      - uses: cachix/cachix-action@v12
        with:
          name: nix-config
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: nix-flake-check
        run: |
          nix run '${{ env.flake }}#nix-fast-build' -- \
            --no-nom \
            --skip-cached \
            --systems='x86_64-linux' \
            --flake='${{ env.flake }}#checks.x86_64-linux'

  get-hosts:
    runs-on: ubuntu-latest
    outputs:
      hosts: ${{ steps.get-hosts.outputs.hosts }}
      nix-systems: ${{ steps.get-hosts.outputs.hostPlatforms }}
      gh-systems: ${{ steps.get-hosts.outputs.ghSystems }}
    steps:
      - uses: DeterminateSystems/nix-installer-action@v4
        with:
          nix-installer-tag: ${{ env.nix-installer-tag }}
          extra-conf: ${{ env.nix-conf }}
      - id: get-hosts
        run: |
          TMP="$(mktemp -d)"
          nix eval --json '${{ env.flake }}#hosts' | jq -c '
            to_entries
            | map({name: .key} + .value)
            | map_values(
                if .hostPlatform  == "x86_64-linux" then . + {ghSystem: "ubuntu-latest"}
                elif .hostPlatform == "aarch64-linux" then . + {ghSystem: "ubuntu-latest"}
                elif .hostPlatform == "x86_64-darwin" then . + {ghSystem: "macos-latest"}
                else . + {ghSystem: null} end)
            | map(select(.ghSystem != null))
          ' > "$TMP/hosts.json"

          jq -c '
            map({hostPlatform, ghSystem})
            | unique_by(.hostPlatform)
            | sort_by(.ghSystem)
          ' \
          < "$TMP/hosts.json" \
          > "$TMP/hostPlatforms.json"

          jq -c <<EOF >"$TMP/ghSystems.json"
          {
            "ubuntu-latest": "x86_64-linux",
            "macos-latest": "x86_64-darwin"
          }
          EOF

          {
            echo "hosts=$(cat "$TMP/hosts.json")"
            echo "hostPlatforms=$(cat "$TMP/hostPlatforms.json")"
            echo "ghSystems=$(cat "$TMP/ghSystems.json")"
          } >> "$GITHUB_OUTPUT"

  build-shell:
    name: build-shell (${{ matrix.system.hostPlatform }})
    runs-on: ${{ matrix.system.ghSystem }}
    needs: [ get-hosts ]
    strategy:
      fail-fast: false
      matrix:
        system: ${{ fromJson(needs.get-hosts.outputs.nix-systems) }}
    steps:
      - uses: DeterminateSystems/nix-installer-action@v4
        with:
          nix-installer-tag: ${{ env.nix-installer-tag }}
          extra-conf: ${{ env.nix-conf }}
      - uses: cachix/cachix-action@v12
        with:
          name: nix-config
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: setup-aarch64-ssh
        if: ${{ matrix.system.hostPlatform == 'aarch64-linux' }}
        run: |
          mkdir -p ~/.ssh
          echo '${{ env.aarch64-ssh-config }}' > ~/.ssh/config
          echo '${{ env.aarch64-ssh-known-host }}' >> ~/.ssh/known_hosts
          echo '${{ secrets.AARCH64_BUILDER_KEY }}' > ~/.ssh/id_ed25519
          chmod 0600 ~/.ssh/*
      - name: build-shell
        run: |
          declare -a args=(
            '--no-nom'
            '--skip-cached'
            '--systems=${{ matrix.system.hostPlatform }}'
          )
          if [[ '${{ matrix.system.hostPlatform }}' == 'aarch64-linux' ]]; then
            args+=(
              '--remote=${{ env.aarch64-host }}'
              '--option' 'accept-flake-config' 'true'
            )
          fi
          args+=(
            '--flake=${{ env.flake }}#devShells.${{ matrix.system.hostPlatform }}.default.inputDerivation'
          )
          nix run '${{ env.flake }}#nix-fast-build' -- "${args[@]}"

  build-host:
    name: build-${{ matrix.host.name }}
    runs-on: ${{ matrix.host.ghSystem }}
    needs: [ get-hosts ]
    strategy:
      fail-fast: false
      matrix:
        host: ${{ fromJson(needs.get-hosts.outputs.hosts) }}
    steps:
      - uses: DeterminateSystems/nix-installer-action@v4
        with:
          nix-installer-tag: ${{ env.nix-installer-tag }}
          extra-conf: ${{ env.nix-conf }}
      - uses: cachix/cachix-action@v12
        with:
          name: nix-config
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: setup-aarch64-ssh
        if: ${{ matrix.host.hostPlatform == 'aarch64-linux' }}
        run: |
          mkdir -p ~/.ssh
          echo '${{ env.aarch64-ssh-config }}' > ~/.ssh/config
          echo '${{ env.aarch64-ssh-known-host }}' >> ~/.ssh/known_hosts
          echo '${{ secrets.AARCH64_BUILDER_KEY }}' > ~/.ssh/id_ed25519
          chmod 0600 ~/.ssh/*
      - name: build-host
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 720
          max_attempts: 3
          retry_on: error
          command: |
            declare -a args=(
              '--no-nom'
              '--skip-cached'
              '--systems=${{ matrix.host.hostPlatform }}'
            )
            if [[ '${{ matrix.host.hostPlatform }}' == 'aarch64-linux' ]]; then
              args+=(
                '--remote=${{ env.aarch64-host }}'
                '--option' 'accept-flake-config' 'true'
              )
            fi
            args+=(
              '--flake=${{ env.flake }}#packages.${{ matrix.host.hostPlatform }}.${{ matrix.host.name }}'
            )
            nix run '${{ env.flake }}#nix-fast-build' -- "${args[@]}"

  check:
    runs-on: ubuntu-latest
    needs: [ flake-check, build-host, build-shell ]
    if: always()
    steps:
      - uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
