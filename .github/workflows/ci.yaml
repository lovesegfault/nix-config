name: ci

on:
  push:
    branches:
      - master
      - try
  pull_request:

env:
  flake: "github:${{ github.repository }}/${{ github.sha }}"
  nix-conf: |-
    auto-optimise-store = true
    accept-flake-config = true
    builders-use-substitutes = true
    max-jobs = auto
  aarch64-host: "aarch64.nixos.community"
  aarch64-ssh-config: |-
    Host aarch64.nixos.community 147.28.143.250
        User lovesegfault
        IdentitiesOnly yes
        IdentityFile ~/.ssh/id_ed25519
  aarch64-ssh-known-host: |-
    aarch64-build-box,aarch64.nixos.community,147.75.77.190 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMUTz5i9u5H2FHNAmZJyoJfIGyUm/HfGhfwnc142L3ds

jobs:
  flake-check:
    runs-on: ubuntu-latest
    steps:
      - uses: DeterminateSystems/nix-installer-action@v5
        with:
          extra-conf: ${{ env.nix-conf }}
      - uses: cachix/cachix-action@v12
        with:
          name: nix-config
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: nix-flake-check
        run: |
          nix run '${{ env.flake }}#nix-fast-build' -- \
            --no-nom \
            --skip-cached \
            --systems='x86_64-linux' \
            --flake='${{ env.flake }}#checks.x86_64-linux'
  get-attrs:
    runs-on: ubuntu-latest
    outputs:
      attrs: ${{ steps.get-attrs.outputs.attrs }}
    env:
      aarch64-ssh-key: ${{ secrets.AARCH64_BUILDER_KEY }}
    steps:
      - uses: DeterminateSystems/nix-installer-action@v5
        with:
          extra-conf: ${{ env.nix-conf }}
      - id: get-attrs
        run: |
          TMP="$(mktemp -d)"
          # host packages
          nix eval --json '${{ env.flake }}#hosts' | jq -c '
            to_entries
            | map({name: .key} + .value)
            | map_values(
                if .hostPlatform  == "x86_64-linux" then . + {runsOn: "ubuntu-latest"}
                elif .hostPlatform == "aarch64-linux" then . + {runsOn: "ubuntu-latest"}
                elif .hostPlatform == "x86_64-darwin" then . + {runsOn: "macos-latest"}
                else . + {runsOn: null} end)
            | map(select(.runsOn != null))
            | map({
                name,
                runsOn,
                hostPlatform,
                attr: "${{ env.flake }}#packages.\(.hostPlatform).\(.name)"
              })
          ' >"$TMP/hostAttrs.json"

          # check that we can build aarch64-linux hosts
          if [[ -z "${aarch64-ssh-key}" ]]; then
            echo "::warning title=Incomplete CI run::Not all attributes will be built since no AArch64 SSH key is available"
            old_host_attrs="$(<"$TMP/hostAttrs.json")"
            jq -c '
                map(select(.hostPlatform != "aarch64-linux"))
            ' <<<"$old_host_attrs" \
              >"$TMP/hostAttrs.json"
          fi

          # dev shells
          jq -c '
            unique_by(.hostPlatform)
            | sort_by(.runsOn)
            | map(
                .attr = "${{ env.flake }}#devShells.\(.hostPlatform).default.inputDerivation"
                | .name = "shell-\(.hostPlatform)"
              )
          ' <"$TMP/hostAttrs.json" \
            >"$TMP/shellAttrs.json"

          # join attrs
          jq -s add "$TMP/hostAttrs.json" "$TMP/shellAttrs.json" > "$TMP/attrs.json"

          # check for dupes
          duplicate_count="$(jq -r '
            group_by([.name, .attr])
            | map(select(length>1))
            | length
          ' < "$TMP/attrs.json")"
          if [[ "$duplicate_count" -ne 0 ]]; then
            echo "::error title=Duplicate attrs::Duplicate entries in attrs.json: \`$(cat "$TMP/attrs.json")\`"
            exit 1
          fi

          echo "attrs=$(<"$TMP/attrs.json")" >> "$GITHUB_OUTPUT"

  build:
    name: build ${{ matrix.attrs.name }}
    runs-on: ${{ matrix.attrs.runsOn }}
    needs: [ get-attrs ]
    strategy:
      fail-fast: false
      matrix:
        attrs: ${{ fromJson(needs.get-attrs.outputs.attrs) }}
    env:
      aarch64-ssh-key: ${{ secrets.AARCH64_BUILDER_KEY }}
      system: ${{ matrix.attrs.hostPlatform }}
    steps:
      - uses: DeterminateSystems/nix-installer-action@v5
        with:
          extra-conf: ${{ env.nix-conf }}
      - uses: cachix/cachix-action@v12
        with:
          name: nix-config
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: setup-aarch64-ssh
        if: ${{ env.system == 'aarch64-linux' }}
        run: |
          mkdir -p ~/.ssh
          echo '${{ env.aarch64-ssh-config }}' > ~/.ssh/config
          echo '${{ env.aarch64-ssh-known-host }}' >> ~/.ssh/known_hosts
          echo '${{ env.aarch64-ssh-key }}' > ~/.ssh/id_ed25519
          chmod 0600 ~/.ssh/*
      - name: nix-build
        run: |
          declare -a args=(
            '--no-nom'
            '--skip-cached'
            '--systems=${{ env.system }}'
            '--option' 'accept-flake-config' 'true'
          )
          [[ '${{ env.system }}' == 'aarch64-linux' ]] && args+=('--remote=${{ env.aarch64-host }}')
          args+=('--flake=${{ matrix.attrs.attr }}')
          nix run '${{ env.flake }}#nix-fast-build' -- "${args[@]}"

  check:
    runs-on: ubuntu-latest
    needs: [ flake-check, build ]
    if: always()
    steps:
      - uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
