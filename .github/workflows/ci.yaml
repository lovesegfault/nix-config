name: ci
on:
  push:
    branches:
      - master
      - try
  pull_request:
jobs:
  lints:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v17
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            experimental-features = nix-command flakes recursive-nix
      - uses: cachix/cachix-action@v10
        with:
          name: nix-config
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}
      - name: parse
        run: nix-instantiate --json --parse ./**/*.nix
      - name: lints
        run: |
          cachix watch-exec nix-config -- \
            nix build -L --keep-going \
            .\#checks.x86_64-linux.pre-commit-check

  build-shell:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v17
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            experimental-features = nix-command flakes recursive-nix
      - uses: cachix/cachix-action@v10
        with:
          name: nix-config
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}
      - name: build-shell
        run: |
          cachix watch-exec nix-config -- \
            nix build -L --keep-going \
            .\#devShells.x86_64-linux.default.inputDerivation

  get-hosts:
    runs-on: ubuntu-latest
    outputs:
      hosts: ${{ steps.get-hosts.outputs.hosts }}
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v17
      - id: get-hosts
        run: echo "::set-output name=hosts::$(nix eval --json -f ./nix/hosts.nix | jq -c 'keys')"

  eval-host:
    name: eval-${{ matrix.host }}
    runs-on: ubuntu-latest
    needs: get-hosts
    strategy:
      fail-fast: false
      matrix:
        host: ${{ fromJson(needs.get-hosts.outputs.hosts) }}
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v17
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            builders-use-substitutes = true
            experimental-features = nix-command flakes recursive-nix
      - name: setup-aarch64-builder
        env:
          AARCH64_BOX_KEY: ${{ secrets.AARCH64_BOX_KEY }}
          KNOWN_HOSTS: ${{ secrets.KNOWN_HOSTS }}
        run: |
          sudo mkdir -p /root/.ssh
          echo "$AARCH64_BOX_KEY" | sudo tee /root/.ssh/aarch64.community.nixos > /dev/null
          sudo chmod 0600 /root/.ssh/aarch64.community.nixos
          echo "$KNOWN_HOSTS" | sudo tee -a /root/.ssh/known_hosts > /dev/null
          builder_cfg=(
            lovesegfault@aarch64.nixos.community
            aarch64-linux
            /root/.ssh/aarch64.community.nixos
            64
            8
            big-parallel
          )
          echo "${builder_cfg[*]}" | sudo tee /etc/nix/machines > /dev/null
      - uses: cachix/cachix-action@v10
        with:
          name: nix-config
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}
      - name: eval
        run: nix-instantiate --eval -A packages.x86_64-linux.hosts.${{ matrix.host }}

  build-host:
    name: build-${{ matrix.host }}
    runs-on: ubuntu-latest
    needs: get-hosts
    strategy:
      fail-fast: false
      matrix:
        host: ${{ fromJson(needs.get-hosts.outputs.hosts) }}
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v17
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            experimental-features = nix-command flakes recursive-nix
      - name: setup-aarch64-builder
        env:
          AARCH64_BOX_KEY: ${{ secrets.AARCH64_BOX_KEY }}
          KNOWN_HOSTS: ${{ secrets.KNOWN_HOSTS }}
        run: |
          sudo mkdir -p /root/.ssh
          echo "$AARCH64_BOX_KEY" | sudo tee /root/.ssh/aarch64.community.nixos > /dev/null
          sudo chmod 0600 /root/.ssh/aarch64.community.nixos
          echo "$KNOWN_HOSTS" | sudo tee -a /root/.ssh/known_hosts > /dev/null
          nix_cfg=(
            "builders-use-substitutes = true"
          )
          builder_cfg=(
            lovesegfault@aarch64.nixos.community
            aarch64-linux
            /root/.ssh/aarch64.community.nixos
            64
            8
            big-parallel
          )
          echo "${builder_cfg[*]}" | sudo tee /etc/nix/machines > /dev/null
          echo "${nix_cfg[*]}" | sudo tee -a /etc/nix/nix.conf > /dev/null
      - uses: cachix/cachix-action@v10
        with:
          name: nix-config
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}
      - name: add-mask-overlay
        run: cp nix/mask-large-drvs.nix nix/overlays/
      - name: build-host
        uses: nick-invision/retry@v2
        with:
          max_attempts: 2
          timeout_minutes: 720
          retry_on: error
          command: |
            cachix watch-exec nix-config -- \
              nix run nixpkgs#nix-build-uncached -- \
                --keep-going \
                -A packages.x86_64-linux.hosts.${{ matrix.host }}

  check:
    runs-on: ubuntu-latest
    needs: [ eval-host, build-host ]
    if: always()
    steps:
      - name: check
        run: |
          status_uri="https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs"
          user_str="admin:${{ secrets.PAT }}"
          run="$(curl -X GET -s -u "${user_str}" "${status_uri}")"
          jobs="$(jq '.jobs[]' <<< "${run}")"
          statuses="$(jq '{job: .name, status: .conclusion}' <<< "${jobs}")"
          builds="$(jq 'select(.job | contains("build"))' <<< "${statuses}")"
          failed="$(jq 'select(.status | contains("success") | not)' <<< "${builds}")"

          if [ -z "${failed}" ]; then
            echo "OK"
          else
            echo "FAIL"
            exit 1
          fi
